---
- command: opencv_version
  register: opencv_version_result
  ignore_errors: True


- name: Create temporary download directory
  file: name={{ download_dir }} state=directory
  when: opencv_version_result|failed

- name: Download and unzip opencv
  unarchive:
    src: "https://github.com/Itseez/opencv/archive/{{ opencv_version }}.zip"
    dest: "{{ download_dir }}"
    copy: no
    creates: "{{ download_dir }}/opencv-{{ opencv_version }}"
  when: opencv_version_result|failed

- name: Download and unzip opencv_contrib
  unarchive:
    src: "https://github.com/Itseez/opencv_contrib/archive/{{ opencv_version }}.zip"
    dest: "{{ download_dir }}"
    copy: no
    creates: "{{ download_dir }}/opencv_contrib-{{ opencv_version }}"
  when: opencv_version_result|failed

- name: Create build directory
  file: name={{ download_dir }}/opencv-{{ opencv_version }}/build state=directory
  when: opencv_version_result|failed

- name: Make the opencv build artifacts
  shell: |
    cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D INSTALL_C_EXAMPLES=OFF -D INSTALL_PYTHON_EXAMPLES=OFF -D BUILD_EXAMPLES=OFF ..
  args:
    chdir: "{{ download_dir }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash
  when: opencv_version_result|failed

- shell: |
    cat /proc/cpuinfo | grep processor | wc -l
  register: num_processors
  when: opencv_version_result|failed

- name: Compile opencv
  shell: |
    make -j{{num_processors.stdout.0}}
  args:
    chdir: "{{ download_dir }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash
  when: opencv_version_result|failed


- name: Install opencv
  become: true
  shell: |
    make install
    ldconfig
  args:
    chdir: "{{ download_dir }}/opencv-{{ opencv_version }}/build"
    executable: /bin/bash
  when: opencv_version_result|failed

# - name: Symlink opencv to virtualenv
#   file: path={{ virtualenv_home }}/{{ virtualenv_name }}/lib/python3.4/site-packages/cv2.so src=/usr/local/lib/python3.4/site-packages/cv2.cpython-34m.so state=link
