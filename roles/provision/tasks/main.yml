---


- name: Install required system packages.
  apt:
    pkg: "{{ item }}"
    state: installed
    update-cache: yes
    cache_valid_time: 43200
  with_items: "{{ system_packages }}"

- name: Upgrade all packages
  apt:
    upgrade: safe
    update-cache: yes
    cache_valid_time: 43200

- name: Create the project directory.
  file:
    path: "{{ project_root }}"
    state: directory
    # group: "{{ project_name }}"
    # owner: "{{ project_name }}"
    mode: 0755

- name: Create user.
  user:
    home: "{{ project_root }}/home"
    name: "{{ project_name }}"
    state: present

- name: Set the owner of the project dir
  file:
    path: "{{ project_root }}"
    state: directory
    group: "{{ project_name }}"
    owner: "{{ project_name }}"
    mode: 0755

- name: Create the code directory.
  file:
    path: "{{ project_root }}/code/"
    state: directory
    group: "{{ project_name }}"
    owner: "{{ project_name }}"
    mode: 0755

- name: Set up handy bashrc file
  lineinfile:
    dest: "{{ project_root }}/home/.bashrc"
    line: 'cd && cd ../code && source ../env/bin/activate'

- name: Install required Python packages.
  pip:
    name: "{{ item }}"
    state: latest
  with_items: "{{ python_packages }}"

- name: Install gunicorn
  pip:
    name: "gunicorn"
    virtualenv: "{{ project_root }}/env/"
    virtualenv_python: "python2.7"
  become_user: "{{ project_name }}"

- name: Install python2 psycopg2
  pip:
    name: "psycopg2"
    executable: "pip2"

- stat: path=/etc/letsencrypt/live/{{ domain }}/privkey.pem
  register: cert



- name: Install htpasswd file
  template:
    src: files/conf/htpasswd
    dest: "{{ project_root }}/.htpasswd"
  notify: restart nginx

- name: Install secure nginx configuration file.
  template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
  notify: restart nginx
  when: cert.stat.exists == True

- name: Install INSECURE nginx configuration file.
  template: src=files/conf/nginx.conf dest=/etc/nginx/sites-enabled/{{ project_name }}
  notify: restart nginx
  when: cert.stat.exists == False

- debug:
    msg: "WARNING, INSECURE nginx. You'll need to run certbot"
  when: cert.stat.exists == False

- name: Install nginx mime.types
  template: src=files/conf/mime.types dest=/etc/nginx/mime.types
  notify: "restart nginx"

- name: Install postgres_hba configuration file.
  template: src=files/conf/pg_hba.conf dest=/etc/postgresql/9.5/main/pg_hba.conf
  notify: "restart postgres"

- name: Install upstart init scripts.
  template:
    src: files/upstart/{{ item }}.conf
    dest: /etc/init/{{ project_name }}_{{ item }}.conf
  with_items: "{{ initfiles }}"
  when: ansible_distribution_version == "14.04"

- name: Install systemd init scripts.
  template:
    src: files/systemd/{{ item }}.service
    dest: /etc/systemd/system/{{ project_name }}_{{ item }}.service
  with_items: "{{ initfiles }}"
  when: ansible_distribution_version == "16.04"
  notify: "restart web frontend"

- name: Create DB user.
  postgresql_user:
    name: "{{project_name}}"
    role_attr_flags: "CREATEDB,SUPERUSER"

- name: Create database.
  postgresql_db:
    name: "{{project_name}}"



#   - name: Set up the CSV creation cron
#     cron: name="create {{project_name}} CSVs" minute="30" hour="04,19" job="{{ project_root }}/code/manage.py candidates_create_csv --site-base-url https://candidates.democracyclub.org.uk {{ project_root }}-data/media_root/candidates" user={{project_name}}
#
#   - name: Set up the ImageExtra check cron
#     cron: name="create {{project_name}} ImageExtra check" minute="*/15" job="echo 'select i.id from images_image i left outer join candidates_imageextra ie on ie.base_id = i.id where ie.id IS NULL order by i.id;' | psql -q -t ynr | sed '/^$/d'" user={{project_name}}
# #
# #
# handlers:
# - include: handlers.yml
# #
# - include: deploy.yml
